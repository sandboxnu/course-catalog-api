{
  "name": "course-catalog-api",
  "version": "1.0.9",
  "license": "AGPL-3.0",
  "scripts": {
    "about:babel-node-ts": "//// This command is used to run Typescript files on the fly. Mainly used in other commands, not standalone",
    "babel-node-ts": "babel-node --extensions .ts",
    "about:dev": "//// Runs the API server - the course catalog API",
    "dev": "nodemon --exec ./node_modules/.bin/cross-env NODE_ENV=dev yarn babel-node-ts graphql/index.ts",
    "about:dev:notifs": "//// Runs the API server along with the notifications server",
    "dev:notifs": "ENABLE_NOTIFS=true yarn dev",
    "about:scrape": "//// Scrapes ALL of the latest class data from Banner",
    "scrape": "yarn babel-node-ts --max_old_space_size=12000 scrapers/main.ts",
    "about:scrape:custom": "//// Runs a scrape with some custom configuration. Read the backend docs for more info",
    "scrape:custom": "CUSTOM_SCRAPE=true yarn scrape",
    "about:updater": "//// Scrapes frequently-changing class data from Banner (eg. seats free)",
    "updater": "yarn babel-node-ts services/updater.ts",
    "about:resetIndex": "//// Deletes the Elasticsearch indexes and re-creates them. This will discard all existing data",
    "resetIndex": "yarn babel-node-ts scripts/resetIndex.ts",
    "about:resetIndex:noLoss": "//// Resets the Elasticsearch indexes without losing their data. This allows us to update the index mapping (which can't be done directly while there is data in the index)",
    "resetIndex:noLoss": "yarn babel-node-ts scripts/resetIndexWithoutLoss.ts",
    "about:populateES": "//// Updates Elasticsearch to contain all the data we currently have in the database",
    "populateES": "yarn babel-node-ts scripts/populateES.ts",
    "about:dev:docker": "//// Creates the Docker containers needed to run the API locally",
    "dev:docker": "docker compose -f infrastructure/dev/compose.yaml up -d",
    "about:dev:docker:del": "//// Deletes the aforementioned Docker containers",
    "dev:docker:del": "docker compose -f infrastructure/dev/compose.yaml down -v",
    "about:dev:docker:server": "//// Experimental: runs the FULL STACK (ie. including searchneu) via Docker",
    "dev:docker:server": "docker compose -f infrastructure/dev/docker-compose-server.yml up -d",
    "about:dev:docker:server:del": "//// Deletes the aforementioned Docker containers",
    "dev:docker:server:del": "docker compose -f infrastructure/dev/docker-compose-server.yml down -v",
    "about:db:migrate": "//// Applies Prisma migrations. Think of migrations as `git` for databases - this allows us to change the structure of the DB in a way that can be easily replicated by all developers (and in production)",
    "db:migrate": "yarn prisma migrate dev",
    "about:db:refresh": "//// Generates Typescript files based on the schema of the database",
    "db:refresh": "yarn prisma generate",
    "about:lint": "//// Ensures that our code follows best practices",
    "lint": "yarn eslint --ignore-path .gitignore --ext .js,.ts .",
    "about:tsc": "//// Runs TSC (because of our config, this will NOT compile the files, just typecheck them)",
    "tsc": "tsc",
    "about:test": "//// Runs a basic suite of unit and integration tests",
    "test": "yarn jest --verbose --testPathIgnorePatterns='(seq|reg|git).[jt]s'",
    "about:dbtest": "//// Runs tests interacting with our database. Must have the Docker containers running. This won't touch live data - it will create and teardown a temporary database.",
    "dbtest": "jest -i --projects tests/database --verbose",
    "about:build_backend": "//// Compiles this project",
    "build_backend": "rm -rf dist && mkdir -p dist && babel --extensions '.js,.ts' . -d dist/ --copy-files --ignore node_modules --ignore .git --include-dotfiles && rm -rf dist/.git",
    "about:build": "//// Compiles this project, surpressing output",
    "build": "yarn -s build_backend",
    "about:prod:scrape": "//// Runs the scrapers (same as `yarn scrape`, but on the compiled project)",
    "prod:scrape": "node dist/scrapers/main.js",
    "about:prod": "//// Runs the API (same as `yarn dev`, but on the compiled project)",
    "prod": "node dist/graphql/index.js",
    "about:prod:updater": "//// Runs the updater (same as `yarn updater`, but on the compiled project)",
    "prod:updater": "node dist/services/updater.js",
    "about:prod:db:migrate": "//// Runs the Prisma migrations (same as `yarn db:migrate`, but on the compiled project)",
    "prod:db:migrate": "yarn prisma migrate deploy --preview-feature"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sandboxnu/course-catalog-api.git"
  },
  "main": "yarn prod",
  "dependencies": {
    "@apollo/server": "^4.11.0",
    "@elastic/elasticsearch": "7.17.0",
    "@prisma/client": "5",
    "@typescript-eslint/typescript-estree": "8.8.0",
    "amplitude": "6.0.0",
    "async-retry": "^1.3.1",
    "cacheable-lookup": "7.0.0",
    "cheerio": "1.0.0",
    "colors": "^1.4.0",
    "cors": "^2.8.5",
    "cross-env": "^7.0.3",
    "dotenv": "^16.0.0",
    "eslint-plugin-deprecation": "3.0.0",
    "express": "^4.17.3",
    "fs-extra": "11.2.0",
    "got": "14.4.2",
    "graphql": "^16.3.0",
    "graphql-tag": "^2.12.6",
    "graphql-type-json": "^0.3.0",
    "he": "^1.2.0",
    "jsonwebtoken": "^9.0.0",
    "lodash": "^4.17.4",
    "moment": "^2.29.4",
    "msgpack5": "6.0.2",
    "multi-progress-bars": "5.0.3",
    "nodemon": "3.1.7",
    "object-hash": "3.0.0",
    "p-map": "7.0.2",
    "pg": "^8.5.1",
    "regenerator-runtime": "0.14.1",
    "request": "^2.81.0",
    "request-promise-native": "^1.0.9",
    "rollbar": "^2.19.4",
    "tough-cookie": "5.0.0",
    "twilio": "5.3.2",
    "urijs": "^1.19.11",
    "uuid": "10.0.0",
    "winston": "^3.3.3",
    "winston-daily-rotate-file": "5.0.0"
  },
  "devDependencies": {
    "@babel/cli": "^7.25.6",
    "@babel/core": "^7.25.2",
    "@babel/node": "^7.0.0",
    "@babel/preset-env": "^7.25.4",
    "@babel/preset-typescript": "^7.8.3",
    "@babel/register": "^7.0.0",
    "@types/async-retry": "^1.4.3",
    "@types/cheerio": "^0.22.30",
    "@types/fs-extra": "11.0.4",
    "@types/he": "^1.1.2",
    "@types/jest": "29.5.13",
    "@types/jsonwebtoken": "9.0.7",
    "@types/lodash": "^4.14.150",
    "@types/msgpack5": "^3.4.2",
    "@types/node": "22.7.4",
    "@types/request": "^2.48.7",
    "@types/request-promise-native": "^1.0.18",
    "@types/urijs": "^1.19.17",
    "@types/uuid": "10.0.0",
    "@typescript-eslint/eslint-plugin": "8.8.0",
    "@typescript-eslint/parser": "8.8.0",
    "coveralls": "^3.0.6",
    "docsify-cli": "^4.4.4",
    "eslint": "9.11.1",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-airbnb-typescript": "18.0.0",
    "eslint-config-prettier": "9.1.0",
    "eslint-import-resolver-typescript": "3.6.3",
    "eslint-plugin-babel": "^5.1.0",
    "eslint-plugin-import": "^2.25.2",
    "eslint-plugin-prettier": "5.2.1",
    "eslint-plugin-promise": "7.1.0",
    "husky": "9.1.6",
    "jest": "29.7.0",
    "jest-environment-node": "29.7.0",
    "nock": "^13.3.0",
    "prettier": "3.3.3",
    "pretty-quick": "4.0.0",
    "prisma": "5",
    "tsx": "^4.19.1",
    "typescript": "5.6.2",
    "yarn-deduplicate": "6.0.2"
  },
  "about:husky": [
    "Husky allows us to use git hooks - in other words, to execute an action every time a specific git action is taken.",
    "Currently, we have a 'pre-commit' hook that runs whenever a user tries committing files, but before they are actually committed.",
    "This hook runs `pretty` (to format the files), and `eslint` (to ensure we don't have bad code patters)",
    "This only runs on the files that have been staged to be committed."
  ],
  "husky": {
    "hooks": {
      "pre-commit": "yarn pretty-quick --staged && yarn eslint --no-error-on-unmatched-pattern --fix $(git diff --name-only HEAD | grep -E '\\.(js|ts)$' | xargs)"
    }
  },
  "about:engines": [
    "This helps us ensure that only specific versions of Node are used to run this project",
    "Older versions may lead to unexpected errors due to dependency issues, etc."
  ],
  "engines": {
    "node": ">=16"
  }
}
