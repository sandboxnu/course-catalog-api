generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  classAttributes String[]  @map(name: "class_attributes")
  classId         String?   @map(name: "class_id")
  coreqs          Json?
  description     String?
  feeAmount       Int?      @map(name: "fee_amount")
  feeDescription  String?   @map(name: "fee_description")
  host            String?
  id              String    @id
  lastUpdateTime  DateTime? @map(name: "last_update_time")
  maxCredits      Int?      @map(name: "max_credits")
  minCredits      Int?      @map(name: "min_credits")
  name            String?
  nupath          String[]
  optPrereqsFor   Json?     @map(name: "opt_prereqs_for")
  prereqs         Json?
  prereqsFor      Json?     @map(name: "prereqs_for")
  prettyUrl       String?   @map(name: "pretty_url")
  subject         String?
  termId          String?   @map(name: "term_id")
  url             String?
  sections        Section[]

  FollowedCourse FollowedCourse[]
  @@unique([classId, termId, subject], name: "uniqueCourseProps")
  @@map(name: "courses")
}

model Major {
  yearVersion  String @map(name: "year_version")
  majorId      String @map(name: "major_id")
  plansOfStudy Json   @map(name: "plans_of_study")
  spec         Json

  @@id([yearVersion, majorId])
  @@map(name: "majors")
}

model Professor {
  bigPictureUrl     String?  @map(name: "big_picture_url")
  email             String?
  emails            String[]
  firstName         String?  @map(name: "first_name")
  googleScholarId   String?  @map(name: "google_scholar_id")
  id                String   @id
  lastName          String?  @map(name: "last_name")
  link              String?
  name              String?
  officeRoom        String?  @map(name: "office_room")
  personalSite      String?  @map(name: "personal_site")
  phone             String?
  pic               Json?
  primaryDepartment String?  @map(name: "primary_department")
  primaryRole       String?  @map(name: "primary_role")
  streetAddress     String?  @map(name: "street_address")
  url               String?

  @@map(name: "professors")
}

model Section {
  classHash      String?  @map(name: "class_hash")
  classType      String?  @map(name: "class_type")
  crn            String?
  honors         Boolean?
  id             String   @id
  info           String?
  meetings       Json?
  campus         String?
  profs          String[]
  seatsCapacity  Int?     @map(name: "seats_capacity")
  seatsRemaining Int?     @map(name: "seats_remaining")
  url            String?
  waitCapacity   Int?     @map(name: "wait_capacity")
  waitRemaining  Int?     @map(name: "wait_remaining")
  course         Course?  @relation(fields: [classHash], references: [id])

  FollowedSection FollowedSection[]
  @@map(name: "sections")
}

model Subject {
  abbreviation String @id
  description  String

  @@map(name: "subjects")
}

model FollowedCourse {
  courseHash String @map(name: "course_hash")
  course     Course @relation(fields: [courseHash], references: [id])
  userId     Int    @map(name: "user_id")
  user       User   @relation(fields: [userId], references: [id])

  @@id([userId, courseHash])
  @@map(name: "followed_courses")
}

model FollowedSection {
  sectionHash String  @map(name: "section_hash")
  section     Section @relation(fields: [sectionHash], references: [id])
  userId      Int     @map(name: "user_id")
  user        User    @relation(fields: [userId], references: [id])

  @@id([userId, sectionHash])
  @@map(name: "followed_sections")
}

model User {
  id               Int               @id @default(autoincrement())
  phoneNumber      String            @unique @map(name: "phone_number")
  followedSections FollowedSection[]

  FollowedCourse FollowedCourse[]
  @@map(name: "users")
}
