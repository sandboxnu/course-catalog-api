generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_WITH_CONNECTIONS")
}

model Course {
  classAttributes String[]         @map("class_attributes")
  classId         String?          @map("class_id")
  coreqs          Json?
  description     String?
  feeAmount       Int?             @map("fee_amount")
  feeDescription  String?          @map("fee_description")
  host            String?
  id              String           @id
  lastUpdateTime  DateTime?        @default(now()) @map("last_update_time")
  maxCredits      Int?             @map("max_credits")
  minCredits      Int?             @map("min_credits")
  name            String?
  nupath          String[]
  optPrereqsFor   Json?            @map("opt_prereqs_for")
  prereqs         Json?
  prereqsFor      Json?            @map("prereqs_for")
  prettyUrl       String?          @map("pretty_url")
  subject         String?
  termId          String?          @map("term_id")
  url             String?
  FollowedCourse  FollowedCourse[]
  sections        Section[]

  @@unique([classId, termId, subject], name: "uniqueCourseProps", map: "uniqueCourseProps")
  @@map("courses")
}

model Major {
  majorId      String @map("major_id")
  plansOfStudy Json   @map("plans_of_study")
  yearVersion  String @map("year_version")
  spec         Json

  @@id([yearVersion, majorId])
  @@map("majors")
}

model Professor {
  id                String  @id
  name              String
  firstName         String  @map("first_name")
  lastName          String  @map("last_name")
  primaryDepartment String? @map("primary_department")
  primaryRole       String? @map("primary_role")
  phone             String?
  email             String?
  officeRoom        String? @map("office_room")

  @@map("professors")
}

model Section {
  classHash       String?           @map("class_hash")
  classType       String?           @map("class_type")
  crn             String?
  honors          Boolean?
  id              String            @id
  info            String?
  meetings        Json?
  campus          String?
  profs           String[]
  seatsCapacity   Int?              @map("seats_capacity")
  seatsRemaining  Int?              @map("seats_remaining")
  url             String?
  waitCapacity    Int?              @map("wait_capacity")
  waitRemaining   Int?              @map("wait_remaining")
  lastUpdateTime  DateTime?         @default(now()) @map("last_update_time")
  course          Course?           @relation(fields: [classHash], references: [id], onDelete: Cascade)
  FollowedSection FollowedSection[]

  @@map("sections")
}

model Subject {
  abbreviation String @id
  description  String

  @@map("subjects")
}

model FollowedCourse {
  courseHash String @map("course_hash")
  userId     Int    @map("user_id")
  course     Course @relation(fields: [courseHash], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, courseHash])
  @@map("followed_courses")
}

model FollowedSection {
  sectionHash String  @map("section_hash")
  userId      Int     @map("user_id")
  section     Section @relation(fields: [sectionHash], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, sectionHash])
  @@map("followed_sections")
}

model User {
  id               Int               @id @default(autoincrement())
  phoneNumber      String            @unique(map: "users.phone_number_unique") @map("phone_number")
  FollowedCourse   FollowedCourse[]
  followedSections FollowedSection[]

  @@map("users")
}

model TermInfo {
  termId     String @unique(map: "term_ids.term_id_unique") @map("term_id")
  subCollege String @map("sub_college")
  text       String
  active     Boolean @default(true)

  @@map("term_ids")
}
